{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/online/on-fe/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      {\\n        country(code: \\\"SK\\\") {\\n          name\\n          native\\n          emoji\\n          currency\\n          languages {\\n            code\\n            name\\n          }\\n        }\\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Formik, Form, Field } from \"formik\";\nimport * as yup from \"yup\";\nimport { gql } from \"apollo-boost\";\n// const MyRadio ({label, ...props}) => {\n//     const [field, meta] = useField(props)\n//     return (\n//         <FormControlLabel control={<Radio />} label={label} />\n//     )\n// }\n// string.min(limit: number | Ref, message?: string | function): Schema\nyup.setLocale({\n  string: {\n    max: \"Je to dlouhý\"\n  }\n});\nvar schema = yup.object().shape({\n  firstName: yup.string().required().max(10)\n});\n\nvar Index = function Index(props) {\n  console.log(props.data.country.emoji);\n  return __jsx(React.Fragment, null, __jsx(Formik, {\n    initialValues: {\n      firstName: \"\",\n      lastName: \"\",\n      isTall: false,\n      cookies: [],\n      yogurt: \"\"\n    },\n    onSubmit: function onSubmit(data, _ref) {\n      var setSubmitting = _ref.setSubmitting,\n          resetForm = _ref.resetForm;\n      setSubmitting(true);\n      console.log(\"submit: \", data);\n      setSubmitting(false);\n      resetForm();\n    },\n    validationSchema: schema,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, function (_ref2) {\n    var errors = _ref2.errors,\n        touched = _ref2.touched,\n        values = _ref2.values,\n        setSubmitting = _ref2.setSubmitting;\n    return __jsx(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, __jsx(Field, {\n      type: \"text\",\n      name: \"firstName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), errors.firstName && touched.firstName ? __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, errors.firstName) : null, __jsx(Field, {\n      type: \"text\",\n      name: \"lastName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), __jsx(Field, {\n      name: \"isTall\",\n      type: \"checkbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Cookies:\"), __jsx(Field, {\n      name: \"cookies\",\n      type: \"checkbox\",\n      value: \"chocolate chip\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), __jsx(Field, {\n      name: \"cookies\",\n      type: \"checkbox\",\n      value: \"snickerdoodle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), __jsx(Field, {\n      name: \"cookies\",\n      type: \"checkbox\",\n      value: \"sugar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Yogurt:\"), __jsx(Field, {\n      name: \"yogurt\",\n      type: \"radio\",\n      value: \"peach\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), __jsx(Field, {\n      name: \"yogurt\",\n      type: \"radio\",\n      value: \"apple\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), __jsx(Field, {\n      name: \"yogurt\",\n      type: \"radio\",\n      value: \"strawberry\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      disabled: !!!setSubmitting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Submit\"), __jsx(\"pre\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, _JSON$stringify(values, null, 2)));\n  }));\n}; // Index.getInitialProps = async ({\n//   apolloClient\n// }: any) => {\n//   const { data, error, loading } = await apolloClient.query({\n//     query: gql`\n//       {\n//         country(code: \"BR\") {\n//           name\n//           native\n//           emoji\n//           currency\n//           languages {\n//             code\n//             name\n//           }\n//         }\n//       }\n//     `,\n//     fetch\n//   });\n//   if (error) {\n//     return <div>Erreur</div>;\n//   }\n//   return { data, error, loading };\n// };\n\n\nIndex.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(ctx) {\n    var _ref4, data, error, loading;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return ctx.apolloClient.query({\n              query: gql(_templateObject()),\n              fetch: fetch\n            });\n\n          case 2:\n            _ref4 = _context.sent;\n            data = _ref4.data;\n            error = _ref4.error;\n            loading = _ref4.loading;\n\n            if (!error) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt(\"return\", __jsx(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 121\n              },\n              __self: this\n            }, \"Erreur\"));\n\n          case 8:\n            return _context.abrupt(\"return\", {\n              data: data,\n              error: error,\n              loading: loading\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default Index;","map":{"version":3,"sources":["/Users/davidzoufaly/code/online/on-fe/pages/index.tsx"],"names":["Formik","Form","Field","yup","gql","setLocale","string","max","schema","object","shape","firstName","required","Index","props","console","log","data","country","emoji","lastName","isTall","cookies","yogurt","setSubmitting","resetForm","errors","touched","values","getInitialProps","ctx","apolloClient","query","fetch","error","loading"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAoC,QAApC;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,GAAT,QAAoB,cAApB;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEAD,GAAG,CAACE,SAAJ,CAAc;AACZC,EAAAA,MAAM,EAAE;AACNC,IAAAA,GAAG,EAAE;AADC;AADI,CAAd;AAMA,IAAIC,MAAM,GAAGL,GAAG,CAACM,MAAJ,GAAaC,KAAb,CAAmB;AAC9BC,EAAAA,SAAS,EAAER,GAAG,CACXG,MADQ,GAERM,QAFQ,GAGRL,GAHQ,CAGJ,EAHI;AADmB,CAAnB,CAAb;;AAOA,IAAMM,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAuB;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,IAAN,CAAWC,OAAX,CAAmBC,KAA/B;AACA,SACE,4BAEE,MAAC,MAAD;AACE,IAAA,aAAa,EAAE;AACbR,MAAAA,SAAS,EAAE,EADE;AAEbS,MAAAA,QAAQ,EAAE,EAFG;AAGbC,MAAAA,MAAM,EAAE,KAHK;AAIbC,MAAAA,OAAO,EAAE,EAJI;AAKbC,MAAAA,MAAM,EAAE;AALK,KADjB;AAQE,IAAA,QAAQ,EAAE,kBAACN,IAAD,QAAwC;AAAA,UAA/BO,aAA+B,QAA/BA,aAA+B;AAAA,UAAhBC,SAAgB,QAAhBA,SAAgB;AAChDD,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBC,IAAxB;AACAO,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAC,MAAAA,SAAS;AACV,KAbH;AAcE,IAAA,gBAAgB,EAAEjB,MAdpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAgBG;AAAA,QAAGkB,MAAH,SAAGA,MAAH;AAAA,QAAWC,OAAX,SAAWA,OAAX;AAAA,QAAoBC,MAApB,SAAoBA,MAApB;AAAA,QAA4BJ,aAA5B,SAA4BA,aAA5B;AAAA,WACC,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,KAAD;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEGE,MAAM,CAACf,SAAP,IAAoBgB,OAAO,CAAChB,SAA5B,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMe,MAAM,CAACf,SAAb,CADD,GAEG,IAJN,EAKE,MAAC,KAAD;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,EAME,MAAC,KAAD;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,IAAI,EAAC,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,EAOE;AAAK,MAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF,EAQE,MAAC,KAAD;AAAO,MAAA,IAAI,EAAC,SAAZ;AAAsB,MAAA,IAAI,EAAC,UAA3B;AAAsC,MAAA,KAAK,EAAC,gBAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,EASE,MAAC,KAAD;AAAO,MAAA,IAAI,EAAC,SAAZ;AAAsB,MAAA,IAAI,EAAC,UAA3B;AAAsC,MAAA,KAAK,EAAC,eAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,EAUE,MAAC,KAAD;AAAO,MAAA,IAAI,EAAC,SAAZ;AAAsB,MAAA,IAAI,EAAC,UAA3B;AAAsC,MAAA,KAAK,EAAC,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,EAWE;AAAK,MAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAXF,EAYE,MAAC,KAAD;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,IAAI,EAAC,OAA1B;AAAkC,MAAA,KAAK,EAAC,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,EAaE,MAAC,KAAD;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,IAAI,EAAC,OAA1B;AAAkC,MAAA,KAAK,EAAC,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,EAcE,MAAC,KAAD;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,IAAI,EAAC,OAA1B;AAAkC,MAAA,KAAK,EAAC,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdF,EAeE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,QAAQ,EAAE,CAAC,CAAC,CAACa,aAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAfF,EAkBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,gBAAeI,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAN,CAlBF,CADD;AAAA,GAhBH,CAFF,CADF;AA4CD,CA9CD,C,CAgDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAf,KAAK,CAACgB,eAAN;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAwB,iBAAOC,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACiBA,GAAG,CAACC,YAAJ,CAAiBC,KAAjB,CAAuB;AAC5DA,cAAAA,KAAK,EAAE5B,GAAF,mBADuD;AAe5D6B,cAAAA,KAAK,EAALA;AAf4D,aAAvB,CADjB;;AAAA;AAAA;AACdhB,YAAAA,IADc,SACdA,IADc;AACRiB,YAAAA,KADQ,SACRA,KADQ;AACDC,YAAAA,OADC,SACDA,OADC;;AAAA,iBAkBlBD,KAlBkB;AAAA;AAAA;AAAA;;AAAA,6CAmBb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAnBa;;AAAA;AAAA,6CAqBf;AAAEjB,cAAAA,IAAI,EAAJA,IAAF;AAAQiB,cAAAA,KAAK,EAALA,KAAR;AAAeC,cAAAA,OAAO,EAAPA;AAAf,aArBe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;;AAyBA,eAAetB,KAAf","sourcesContent":["import { Formik, Form, Field } from \"formik\";\nimport * as yup from \"yup\";\nimport { gql } from \"apollo-boost\";\nimport { Query } from \"react-apollo\";\n\n// const MyRadio ({label, ...props}) => {\n//     const [field, meta] = useField(props)\n//     return (\n//         <FormControlLabel control={<Radio />} label={label} />\n//     )\n// }\n\n// string.min(limit: number | Ref, message?: string | function): Schema\n\nyup.setLocale({\n  string: {\n    max: \"Je to dlouhý\"\n  }\n});\n\nlet schema = yup.object().shape({\n  firstName: yup\n    .string()\n    .required()\n    .max(10)\n});\n\nconst Index = (props: {data:any}) => {\n  console.log(props.data.country.emoji);\n  return (\n    <>\n      {/* {props.country} */}\n      <Formik\n        initialValues={{\n          firstName: \"\",\n          lastName: \"\",\n          isTall: false,\n          cookies: [],\n          yogurt: \"\"\n        }}\n        onSubmit={(data, { setSubmitting, resetForm }) => {\n          setSubmitting(true);\n          console.log(\"submit: \", data);\n          setSubmitting(false);\n          resetForm();\n        }}\n        validationSchema={schema}\n      >\n        {({ errors, touched, values, setSubmitting }) => (\n          <Form>\n            <Field type=\"text\" name=\"firstName\" />\n            {errors.firstName && touched.firstName ? (\n              <div>{errors.firstName}</div>\n            ) : null}\n            <Field type=\"text\" name=\"lastName\" />\n            <Field name=\"isTall\" type=\"checkbox\" />\n            <div className=\"\">Cookies:</div>\n            <Field name=\"cookies\" type=\"checkbox\" value=\"chocolate chip\" />\n            <Field name=\"cookies\" type=\"checkbox\" value=\"snickerdoodle\" />\n            <Field name=\"cookies\" type=\"checkbox\" value=\"sugar\" />\n            <div className=\"\">Yogurt:</div>\n            <Field name=\"yogurt\" type=\"radio\" value=\"peach\" />\n            <Field name=\"yogurt\" type=\"radio\" value=\"apple\" />\n            <Field name=\"yogurt\" type=\"radio\" value=\"strawberry\" />\n            <button type=\"submit\" disabled={!!!setSubmitting}>\n              Submit\n            </button>\n            <pre>{JSON.stringify(values, null, 2)}</pre>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\n// Index.getInitialProps = async ({\n//   apolloClient\n// }: any) => {\n//   const { data, error, loading } = await apolloClient.query({\n//     query: gql`\n//       {\n//         country(code: \"BR\") {\n//           name\n//           native\n//           emoji\n//           currency\n//           languages {\n//             code\n//             name\n//           }\n//         }\n//       }\n//     `,\n//     fetch\n//   });\n//   if (error) {\n//     return <div>Erreur</div>;\n//   }\n//   return { data, error, loading };\n// };\n\nIndex.getInitialProps = async (ctx:any) => {\n  const { data, error, loading } = await ctx.apolloClient.query({\n    query: gql`\n      {\n        country(code: \"SK\") {\n          name\n          native\n          emoji\n          currency\n          languages {\n            code\n            name\n          }\n        }\n      }\n    `,\n    fetch\n  });\n  if (error) {\n    return <div>Erreur</div>;\n  }\n  return { data, error, loading };\n};\n\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}