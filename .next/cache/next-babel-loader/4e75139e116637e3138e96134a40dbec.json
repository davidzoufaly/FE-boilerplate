{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/online/on-fe/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Formik, Form, Field } from \"formik\";\nimport * as yup from \"yup\";\nimport { gql } from \"apollo-boost\";\n// const MyRadio ({label, ...props}) => {\n//     const [field, meta] = useField(props)\n//     return (\n//         <FormControlLabel control={<Radio />} label={label} />\n//     )\n// }\n// string.min(limit: number | Ref, message?: string | function): Schema\nyup.setLocale({\n  string: {\n    max: \"Je to dlouhý\"\n  }\n});\nlet schema = yup.object().shape({\n  firstName: yup.string().required().max(10)\n});\n\nconst Index = props => {\n  console.log(props.data);\n  return __jsx(React.Fragment, null, __jsx(Formik, {\n    initialValues: {\n      firstName: \"\",\n      lastName: \"\",\n      isTall: false,\n      cookies: [],\n      yogurt: \"\"\n    },\n    onSubmit: (data, {\n      setSubmitting,\n      resetForm\n    }) => {\n      setSubmitting(true);\n      console.log(\"submit: \", data);\n      setSubmitting(false);\n      resetForm();\n    },\n    validationSchema: schema,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, ({\n    errors,\n    touched,\n    values,\n    setSubmitting\n  }) => __jsx(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, __jsx(Field, {\n    type: \"text\",\n    name: \"firstName\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), errors.firstName && touched.firstName ? __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, errors.firstName) : null, __jsx(Field, {\n    type: \"text\",\n    name: \"lastName\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), __jsx(Field, {\n    name: \"isTall\",\n    type: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Cookies:\"), __jsx(Field, {\n    name: \"cookies\",\n    type: \"checkbox\",\n    value: \"chocolate chip\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), __jsx(Field, {\n    name: \"cookies\",\n    type: \"checkbox\",\n    value: \"snickerdoodle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), __jsx(Field, {\n    name: \"cookies\",\n    type: \"checkbox\",\n    value: \"sugar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Yogurt:\"), __jsx(Field, {\n    name: \"yogurt\",\n    type: \"radio\",\n    value: \"peach\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), __jsx(Field, {\n    name: \"yogurt\",\n    type: \"radio\",\n    value: \"apple\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), __jsx(Field, {\n    name: \"yogurt\",\n    type: \"radio\",\n    value: \"strawberry\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    disabled: !!!setSubmitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"Submit\"), __jsx(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, _JSON$stringify(values, null, 2)))));\n}; // Index.getInitialProps = async ({\n//   apolloClient\n// }: any) => {\n//   const { data, error, loading } = await apolloClient.query({\n//     query: gql`\n//       {\n//         country(code: \"BR\") {\n//           name\n//           native\n//           emoji\n//           currency\n//           languages {\n//             code\n//             name\n//           }\n//         }\n//       }\n//     `,\n//     fetch\n//   });\n//   if (error) {\n//     return <div>Erreur</div>;\n//   }\n//   return { data, error, loading };\n// };\n\n\nIndex.getInitialProps = async ctx => {\n  const {\n    data,\n    error,\n    loading\n  } = await ctx.apolloClient.query({\n    query: gql`\n      {\n        country(code: \"SK\") {\n          name\n        }\n      }\n    `\n  });\n\n  if (error) {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Erreur\");\n  }\n\n  return {\n    data,\n    error,\n    loading\n  };\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/davidzoufaly/code/online/on-fe/pages/index.tsx"],"names":["Formik","Form","Field","yup","gql","setLocale","string","max","schema","object","shape","firstName","required","Index","props","console","log","data","lastName","isTall","cookies","yogurt","setSubmitting","resetForm","errors","touched","values","getInitialProps","ctx","error","loading","apolloClient","query"],"mappings":"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","sourcesContent":["import { Formik, Form, Field } from \"formik\";\nimport * as yup from \"yup\";\nimport { gql } from \"apollo-boost\";\nimport { Query } from \"react-apollo\";\n\n// const MyRadio ({label, ...props}) => {\n//     const [field, meta] = useField(props)\n//     return (\n//         <FormControlLabel control={<Radio />} label={label} />\n//     )\n// }\n\n// string.min(limit: number | Ref, message?: string | function): Schema\n\nyup.setLocale({\n  string: {\n    max: \"Je to dlouhý\"\n  }\n});\n\nlet schema = yup.object().shape({\n  firstName: yup\n    .string()\n    .required()\n    .max(10)\n});\n\nconst Index = (props: {data:any}) => {\n  console.log(props.data);\n  return (\n    <>\n      {/* {props.country} */}\n      <Formik\n        initialValues={{\n          firstName: \"\",\n          lastName: \"\",\n          isTall: false,\n          cookies: [],\n          yogurt: \"\"\n        }}\n        onSubmit={(data, { setSubmitting, resetForm }) => {\n          setSubmitting(true);\n          console.log(\"submit: \", data);\n          setSubmitting(false);\n          resetForm();\n        }}\n        validationSchema={schema}\n      >\n        {({ errors, touched, values, setSubmitting }) => (\n          <Form>\n            <Field type=\"text\" name=\"firstName\" />\n            {errors.firstName && touched.firstName ? (\n              <div>{errors.firstName}</div>\n            ) : null}\n            <Field type=\"text\" name=\"lastName\" />\n            <Field name=\"isTall\" type=\"checkbox\" />\n            <div className=\"\">Cookies:</div>\n            <Field name=\"cookies\" type=\"checkbox\" value=\"chocolate chip\" />\n            <Field name=\"cookies\" type=\"checkbox\" value=\"snickerdoodle\" />\n            <Field name=\"cookies\" type=\"checkbox\" value=\"sugar\" />\n            <div className=\"\">Yogurt:</div>\n            <Field name=\"yogurt\" type=\"radio\" value=\"peach\" />\n            <Field name=\"yogurt\" type=\"radio\" value=\"apple\" />\n            <Field name=\"yogurt\" type=\"radio\" value=\"strawberry\" />\n            <button type=\"submit\" disabled={!!!setSubmitting}>\n              Submit\n            </button>\n            <pre>{JSON.stringify(values, null, 2)}</pre>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\n// Index.getInitialProps = async ({\n//   apolloClient\n// }: any) => {\n//   const { data, error, loading } = await apolloClient.query({\n//     query: gql`\n//       {\n//         country(code: \"BR\") {\n//           name\n//           native\n//           emoji\n//           currency\n//           languages {\n//             code\n//             name\n//           }\n//         }\n//       }\n//     `,\n//     fetch\n//   });\n//   if (error) {\n//     return <div>Erreur</div>;\n//   }\n//   return { data, error, loading };\n// };\n\nIndex.getInitialProps = async (ctx:any) => {\n  const { data, error, loading } = await ctx.apolloClient.query({\n    query: gql`\n      {\n        country(code: \"SK\") {\n          name\n        }\n      }\n    `\n  });\n  if (error) {\n    return <div>Erreur</div>;\n  }\n  return { data, error, loading };\n};\n\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}