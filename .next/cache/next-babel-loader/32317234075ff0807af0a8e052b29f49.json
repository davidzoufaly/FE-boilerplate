{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/online/on-fe/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  {\\n    country(code: \\\"CZ\\\") {\\n      name\\n      native\\n      emoji\\n      currency\\n      languages {\\n        code\\n        name\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Formik, Form, Field } from \"formik\";\nimport * as yup from \"yup\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\nvar COUNTRY_INFO = gql(_templateObject()); // const MyRadio ({label, ...props}) => {\n//     const [field, meta] = useField(props)\n//     return (\n//         <FormControlLabel control={<Radio />} label={label} />\n//     )\n// }\n// string.min(limit: number | Ref, message?: string | function): Schema\n\nyup.setLocale({\n  string: {\n    max: \"Je to dlouhý\"\n  }\n});\nvar schema = yup.object().shape({\n  firstName: yup.string().required().max(10)\n});\n\nvar country = function country() {\n  var _useQuery = useQuery(COUNTRY_INFO),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Loading...\");\n  if (error) return console.log(error);\n  return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, data.country.name);\n};\n\nvar Index = function Index() {\n  return __jsx(React.Fragment, null, country(), __jsx(Formik, {\n    initialValues: {\n      firstName: \"\",\n      lastName: \"\",\n      isTall: false,\n      cookies: [],\n      yogurt: \"\"\n    },\n    onSubmit: function onSubmit(data, _ref) {\n      var setSubmitting = _ref.setSubmitting,\n          resetForm = _ref.resetForm;\n      setSubmitting(true);\n      console.log(\"submit: \", data);\n      setSubmitting(false);\n      resetForm();\n    },\n    validationSchema: schema,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, function (_ref2) {\n    var errors = _ref2.errors,\n        touched = _ref2.touched,\n        values = _ref2.values,\n        setSubmitting = _ref2.setSubmitting;\n    return __jsx(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, __jsx(Field, {\n      type: \"text\",\n      name: \"firstName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), errors.firstName && touched.firstName ? __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, errors.firstName) : null, __jsx(Field, {\n      type: \"text\",\n      name: \"lastName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), __jsx(Field, {\n      name: \"isTall\",\n      type: \"checkbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Cookies:\"), __jsx(Field, {\n      name: \"cookies\",\n      type: \"checkbox\",\n      value: \"chocolate chip\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), __jsx(Field, {\n      name: \"cookies\",\n      type: \"checkbox\",\n      value: \"snickerdoodle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), __jsx(Field, {\n      name: \"cookies\",\n      type: \"checkbox\",\n      value: \"sugar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Yogurt:\"), __jsx(Field, {\n      name: \"yogurt\",\n      type: \"radio\",\n      value: \"peach\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), __jsx(Field, {\n      name: \"yogurt\",\n      type: \"radio\",\n      value: \"apple\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), __jsx(Field, {\n      name: \"yogurt\",\n      type: \"radio\",\n      value: \"strawberry\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      disabled: !!!setSubmitting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Submit\"), __jsx(\"pre\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, _JSON$stringify(values, null, 2)));\n  }));\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/davidzoufaly/code/online/on-fe/pages/index.tsx"],"names":["Formik","Form","Field","yup","gql","useQuery","COUNTRY_INFO","setLocale","string","max","schema","object","shape","firstName","required","country","loading","error","data","console","log","name","Index","lastName","isTall","cookies","yogurt","setSubmitting","resetForm","errors","touched","values"],"mappings":"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","sourcesContent":["import { Formik, Form, Field } from \"formik\";\nimport * as yup from \"yup\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\nconst COUNTRY_INFO = gql`\n  {\n    country(code: \"CZ\") {\n      name\n      native\n      emoji\n      currency\n      languages {\n        code\n        name\n      }\n    }\n  }\n`;\n\n// const MyRadio ({label, ...props}) => {\n//     const [field, meta] = useField(props)\n//     return (\n//         <FormControlLabel control={<Radio />} label={label} />\n//     )\n// }\n\n// string.min(limit: number | Ref, message?: string | function): Schema\n\nyup.setLocale({\n  string: {\n    max: \"Je to dlouhý\"\n  }\n});\n\nlet schema = yup.object().shape({\n  firstName: yup\n    .string()\n    .required()\n    .max(10)\n});\n\nconst country = () => {\n  const { loading, error, data } = useQuery(COUNTRY_INFO);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return console.log(error);\n\n  return <p>{data.country.name}</p>;\n};\n\nconst Index: React.FC = () => {\n  return (\n    <>\n      {country()}\n      <Formik\n        initialValues={{\n          firstName: \"\",\n          lastName: \"\",\n          isTall: false,\n          cookies: [],\n          yogurt: \"\"\n        }}\n        onSubmit={(data, { setSubmitting, resetForm }) => {\n          setSubmitting(true);\n          console.log(\"submit: \", data);\n          setSubmitting(false);\n          resetForm();\n        }}\n        validationSchema={schema}\n      >\n        {({ errors, touched, values, setSubmitting }) => (\n          <Form>\n            <Field type=\"text\" name=\"firstName\" />\n            {errors.firstName && touched.firstName ? (\n              <div>{errors.firstName}</div>\n            ) : null}\n            <Field type=\"text\" name=\"lastName\" />\n            <Field name=\"isTall\" type=\"checkbox\" />\n            <div className=\"\">Cookies:</div>\n            <Field name=\"cookies\" type=\"checkbox\" value=\"chocolate chip\" />\n            <Field name=\"cookies\" type=\"checkbox\" value=\"snickerdoodle\" />\n            <Field name=\"cookies\" type=\"checkbox\" value=\"sugar\" />\n            <div className=\"\">Yogurt:</div>\n            <Field name=\"yogurt\" type=\"radio\" value=\"peach\" />\n            <Field name=\"yogurt\" type=\"radio\" value=\"apple\" />\n            <Field name=\"yogurt\" type=\"radio\" value=\"strawberry\" />\n            <button type=\"submit\" disabled={!!!setSubmitting}>\n              Submit\n            </button>\n            <pre>{JSON.stringify(values, null, 2)}</pre>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}