{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/davidzoufaly/code/online/on-fe/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Formik, Form, Field } from \"formik\";\nimport * as yup from \"yup\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\"; // const MyRadio ({label, ...props}) => {\n//     const [field, meta] = useField(props)\n//     return (\n//         <FormControlLabel control={<Radio />} label={label} />\n//     )\n// }\n// string.min(limit: number | Ref, message?: string | function): Schema\n\nyup.setLocale({\n  string: {\n    max: \"Je to dlouhý\"\n  }\n});\nlet schema = yup.object().shape({\n  firstName: yup.string().required().max(10)\n});\n\nconst country = () => {};\n\nconst Index = () => {\n  return __jsx(React.Fragment, null, country(), __jsx(Formik, {\n    initialValues: {\n      firstName: \"\",\n      lastName: \"\",\n      isTall: false,\n      cookies: [],\n      yogurt: \"\"\n    },\n    onSubmit: (data, {\n      setSubmitting,\n      resetForm\n    }) => {\n      setSubmitting(true);\n      console.log(\"submit: \", data);\n      setSubmitting(false);\n      resetForm();\n    },\n    validationSchema: schema,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, ({\n    errors,\n    touched,\n    values,\n    setSubmitting\n  }) => __jsx(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, __jsx(Field, {\n    type: \"text\",\n    name: \"firstName\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), errors.firstName && touched.firstName ? __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, errors.firstName) : null, __jsx(Field, {\n    type: \"text\",\n    name: \"lastName\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), __jsx(Field, {\n    name: \"isTall\",\n    type: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Cookies:\"), __jsx(Field, {\n    name: \"cookies\",\n    type: \"checkbox\",\n    value: \"chocolate chip\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), __jsx(Field, {\n    name: \"cookies\",\n    type: \"checkbox\",\n    value: \"snickerdoodle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), __jsx(Field, {\n    name: \"cookies\",\n    type: \"checkbox\",\n    value: \"sugar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Yogurt:\"), __jsx(Field, {\n    name: \"yogurt\",\n    type: \"radio\",\n    value: \"peach\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), __jsx(Field, {\n    name: \"yogurt\",\n    type: \"radio\",\n    value: \"apple\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), __jsx(Field, {\n    name: \"yogurt\",\n    type: \"radio\",\n    value: \"strawberry\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    disabled: !!!setSubmitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Submit\"), __jsx(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, _JSON$stringify(values, null, 2)))));\n};\n\nIndex.getInitialProps = () => {\n  const COUNTRY_INFO = gql`\n    {\n      country(code: \"CZ\") {\n        name\n        native\n        emoji\n        currency\n        languages {\n          code\n          name\n        }\n      }\n    }\n  `;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(COUNTRY_INFO);\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Loading...\");\n  if (error) return console.log(error);\n  return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, data.country.name);\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/davidzoufaly/code/online/on-fe/pages/index.tsx"],"names":["Formik","Form","Field","yup","gql","useQuery","setLocale","string","max","schema","object","shape","firstName","required","country","Index","lastName","isTall","cookies","yogurt","data","setSubmitting","resetForm","console","log","errors","touched","values","getInitialProps","COUNTRY_INFO","loading","error","name"],"mappings":"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","sourcesContent":["import { Formik, Form, Field } from \"formik\";\nimport * as yup from \"yup\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\n// const MyRadio ({label, ...props}) => {\n//     const [field, meta] = useField(props)\n//     return (\n//         <FormControlLabel control={<Radio />} label={label} />\n//     )\n// }\n\n// string.min(limit: number | Ref, message?: string | function): Schema\n\nyup.setLocale({\n  string: {\n    max: \"Je to dlouhý\"\n  }\n});\n\nlet schema = yup.object().shape({\n  firstName: yup\n    .string()\n    .required()\n    .max(10)\n});\n\nconst country = () => {};\n\nconst Index = () => {\n  return (\n    <>\n      {country()}\n      <Formik\n        initialValues={{\n          firstName: \"\",\n          lastName: \"\",\n          isTall: false,\n          cookies: [],\n          yogurt: \"\"\n        }}\n        onSubmit={(data, { setSubmitting, resetForm }) => {\n          setSubmitting(true);\n          console.log(\"submit: \", data);\n          setSubmitting(false);\n          resetForm();\n        }}\n        validationSchema={schema}\n      >\n        {({ errors, touched, values, setSubmitting }) => (\n          <Form>\n            <Field type=\"text\" name=\"firstName\" />\n            {errors.firstName && touched.firstName ? (\n              <div>{errors.firstName}</div>\n            ) : null}\n            <Field type=\"text\" name=\"lastName\" />\n            <Field name=\"isTall\" type=\"checkbox\" />\n            <div className=\"\">Cookies:</div>\n            <Field name=\"cookies\" type=\"checkbox\" value=\"chocolate chip\" />\n            <Field name=\"cookies\" type=\"checkbox\" value=\"snickerdoodle\" />\n            <Field name=\"cookies\" type=\"checkbox\" value=\"sugar\" />\n            <div className=\"\">Yogurt:</div>\n            <Field name=\"yogurt\" type=\"radio\" value=\"peach\" />\n            <Field name=\"yogurt\" type=\"radio\" value=\"apple\" />\n            <Field name=\"yogurt\" type=\"radio\" value=\"strawberry\" />\n            <button type=\"submit\" disabled={!!!setSubmitting}>\n              Submit\n            </button>\n            <pre>{JSON.stringify(values, null, 2)}</pre>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nIndex.getInitialProps = () => {\n  const COUNTRY_INFO = gql`\n    {\n      country(code: \"CZ\") {\n        name\n        native\n        emoji\n        currency\n        languages {\n          code\n          name\n        }\n      }\n    }\n  `;\n\n  const { loading, error, data } = useQuery(COUNTRY_INFO);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return console.log(error);\n\n  return <p>{data.country.name}</p>;\n};\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}