{"version":3,"file":"static/webpack/static/development/pages/index.js.c0d61ccd9be64cda8f3d.hot-update.js","sources":["webpack:///./pages/index.tsx"],"sourcesContent":["import { Formik, Form, Field } from \"formik\";\nimport * as yup from \"yup\";\nimport { gql } from \"apollo-boost\";\nimport { Query } from \"react-apollo\";\n\n// const MyRadio ({label, ...props}) => {\n//     const [field, meta] = useField(props)\n//     return (\n//         <FormControlLabel control={<Radio />} label={label} />\n//     )\n// }\n\n// string.min(limit: number | Ref, message?: string | function): Schema\n\nyup.setLocale({\n  string: {\n    max: \"Je to dlouhý\"\n  }\n});\n\nlet schema = yup.object().shape({\n  firstName: yup\n    .string()\n    .required()\n    .max(10)\n});\n\nconst Index = (props: {data:any}) => {\n  console.log(props.data.country.emoji);\n  return (\n    <>\n      {/* {props.country} */}\n      <Formik\n        initialValues={{\n          firstName: \"\",\n          lastName: \"\",\n          isTall: false,\n          cookies: [],\n          yogurt: \"\"\n        }}\n        onSubmit={(data, { setSubmitting, resetForm }) => {\n          setSubmitting(true);\n          console.log(\"submit: \", data);\n          setSubmitting(false);\n          resetForm();\n        }}\n        validationSchema={schema}\n      >\n        {({ errors, touched, values, setSubmitting }) => (\n          <Form>\n            <Field type=\"text\" name=\"firstName\" />\n            {errors.firstName && touched.firstName ? (\n              <div>{errors.firstName}</div>\n            ) : null}\n            <Field type=\"text\" name=\"lastName\" />\n            <Field name=\"isTall\" type=\"checkbox\" />\n            <div className=\"\">Cookies:</div>\n            <Field name=\"cookies\" type=\"checkbox\" value=\"chocolate chip\" />\n            <Field name=\"cookies\" type=\"checkbox\" value=\"snickerdoodle\" />\n            <Field name=\"cookies\" type=\"checkbox\" value=\"sugar\" />\n            <div className=\"\">Yogurt:</div>\n            <Field name=\"yogurt\" type=\"radio\" value=\"peach\" />\n            <Field name=\"yogurt\" type=\"radio\" value=\"apple\" />\n            <Field name=\"yogurt\" type=\"radio\" value=\"strawberry\" />\n            <button type=\"submit\" disabled={!!!setSubmitting}>\n              Submit\n            </button>\n            <pre>{JSON.stringify(values, null, 2)}</pre>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\n// Index.getInitialProps = async ({\n//   apolloClient\n// }: any) => {\n//   const { data, error, loading } = await apolloClient.query({\n//     query: gql`\n//       {\n//         country(code: \"BR\") {\n//           name\n//           native\n//           emoji\n//           currency\n//           languages {\n//             code\n//             name\n//           }\n//         }\n//       }\n//     `,\n//     fetch\n//   });\n//   if (error) {\n//     return <div>Erreur</div>;\n//   }\n//   return { data, error, loading };\n// };\n\nIndex.getInitialProps = async (ctx:any) => {\n  const { data, error, loading } = await ctx.apolloClient.query({\n    query: gql`\n      {\n        country(code: \"SK\") {\n          name\n        }\n      }\n    `,\n    fetch\n  });\n  if (error) {\n    return <div>Erreur</div>;\n  }\n  return { data, error, loading };\n};\n\n\nexport default Index;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AADA;AADA;AAMA;AACA;AADA;AACA;AAMA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgnBA;AAyBA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAOA;AARA;AACA;AAFA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAbA;AAAA;AAcA;AAAA;AAAA;AAAA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAiBA;;;;A","sourceRoot":""}